apiVersion: apps/v1
kind: Deployment
metadata:
  name: pingera-sb-nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pingera-sb-nginx
  template:
    metadata:
      labels:
        app: pingera-sb-nginx
    spec:
      imagePullSecrets:
      - name: #FIXME
      # This Init Container runs first to copy the code
      initContainers:
      - name: copy-app-code
        # Use your existing application image which contains the code
        image: pingera-support-bot:0.0.1 #FIXME
        # This command copies the code into the shared volume
        command: ['sh', '-c', 'cp -r /var/www/. /app-code']
        envFrom:
        - secretRef:
            name: pingera-sb-secrets
        volumeMounts:
        - name: app-code-volume
          mountPath: /app-code

      # The main NGINX container starts after the Init Container succeeds
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config-volume
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        # Mount the shared volume, which now contains the code
        - name: app-code-volume
          mountPath: /var/www

      volumes:
      - name: nginx-config-volume
        configMap:
          name: pingera-sb-nginx-config
      # The shared volume that both containers use
      - name: app-code-volume
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: pingera-sb-nginx-service
spec:
  # This selector must match the labels in your NGINX deployment
  selector:
    app: pingera-sb-nginx
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP
